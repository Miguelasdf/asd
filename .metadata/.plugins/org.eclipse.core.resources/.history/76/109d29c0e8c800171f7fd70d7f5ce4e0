import materiales.*
import clientes.*
import camisetas.*
import centros.*
import pedidos.*
import locales.*

class Proveedor {
	var trabajos = []
	
	constructor(trabajo) {
		trabajos = trabajo
	}
	
	method cantidadDeTrabajos() {	
		return trabajos.size()
	}
		
	method trabajarCamiseta(_camiseta, trabajo, _tipoDeTrabajo, _pedido) {
		trabajo.trabajo(_camiseta, _tipoDeTrabajo)
	}
}


class Estampador inherits Proveedor {
	const servicio = 100 
	const costoAgregado = 100

	override method  trabajarCamiseta(_camiseta, trabajo, _tipoDeTrabajo, _pedido) {
		trabajo.trabajo(_camiseta, _tipoDeTrabajo)
		_camiseta.agregarAdicional(servicio + self.servicioAgregado(_camiseta))
	}
	
	method servicioAgregado(_camiseta) {
		return if (_camiseta.saberSiElEstampadoEsLargo()) costoAgregado else 0 
	}
}
	
	
class Tintorero inherits Proveedor {
	var servicio = 75
	
	override method	trabajarCamiseta(_camiseta, trabajo, _tipoDeTrabajo, _pedido) {
		trabajo.trabajo(_camiseta, _tipoDeTrabajo)
		_camiseta.agregarAdicional(servicio + _camiseta.material().costoAdicional() )
	}
}
	
	
class Costurero  inherits Proveedor {
	var costoUnaCostura = 2
	var costoUnRefuerzo = 5

	override method  trabajarCamiseta(_camiseta, trabajo, _tipoDeTrabajo, _pedido) {
		trabajo.trabajo(_camiseta, _tipoDeTrabajo, _pedido, self)
	}

	method costoDeUnaCostura(){
		return costoUnaCostura
	}

	method costoDeUnRefuerzo(){
		return costoUnRefuerzo
	}
}


object costuras {
	
	method trabajo(camiseta, costuras, pedido, _costurero) {
		camiseta.agregarCostura(costuras)
		camiseta.agregarAdicional(pedido.cantidad() * _costurero.costoDeUnaCostura())
	} 
}

object refuerzos {
	
	method trabajo(camiseta, refuerzos, pedido, _costurero) {
		camiseta.agregarRefuerzo(refuerzos)
		camiseta.agregarAdicional(pedido.cantidad() * _costurero.costoDeUnRefuerzo())
	} 
}

object estamparLeyenda {
	
	method trabajo(camiseta, leyenda) {
		camiseta.cambiarLeyenda(leyenda)
	} 
}

object estamparNumeros {
	
	method trabajo(camiseta, numero){
		camiseta.cambiarLeyenda(numero)
	} 
}

object cambiarColor {
	
	method trabajo(_camiseta, color){
		_camiseta.cambiarColor(color)
	}	
}