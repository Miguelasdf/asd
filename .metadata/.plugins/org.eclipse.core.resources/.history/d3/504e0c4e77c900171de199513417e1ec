import materiales.*
import camisetas.*
import proveedores.*
import clientes.*
import pedidos.*
import centros.*

describe "testeo del practico" {
	var jorge
	var carlos
	var pedro
	var camiseta
	var camiseta2
	var camiseta3
	var camiseta4 
	var camiseta5
	var pedido1
	var pedido2
	var pedido3
	var pedido4
	var debian 
	var areaa
	var areaa2
	var barato
	fixture {
		camiseta = new Camiseta('doblea', poliester, 'rojo', 9, 9, sacachispas, 1000,100)
		camiseta2 = new Camiseta('navi', dryfit, 'verde', 9, 9, sacachispas, 1500,100)
        camiseta3 = new Camiseta('navi', dryfit, 'verde', 9, 9, sanmiguel, 1500,100)	
        camiseta4 = new Camiseta('doblea', poliester, 'negro', 2, 3, sanmiguel, 1500,1000)
        camiseta5 = new Camiseta('doblea', poliester, 'gris', 0, 0, sanmiguel, 30,1)
		jorge = new Tintorero(['gris'])
		carlos = new Estampador('doblev')
		pedro = new Costurero(trabajocostura, 6, 15)
		
		pedido1 = new Pedido([camiseta], [jorge ],  new Date(25,10,2017))
		pedido2 = new Pedido([camiseta], [jorge, carlos],  new Date(13,10,2017))
		pedido3 = new Pedido([camiseta2], [jorge, carlos],  new Date(13,10,2017))
		pedido4 = new Pedido([camiseta4], [jorge],  new Date(12,12,2017))
		debian = new CentroCheto()	
		areaa = new CentroArea(1,4)
		areaa2 = new CentroArea(1,3)
		barato = new CentroBaratija()	
	}
	
	test "saber si un pedido esta listo para entregar al cliente"{
		pedido1.procesar([jorge], 'gris',"modificacion")
          	pedido1.procesar([jorge], 'gris',"modificacion")
           	pedido1.procesar([jorge], 'gris',"modificacion")
	     	pedido1.procesar([jorge], 'gris',"modificacion")
	     	    	pedido1.procesar([jorge], 'gris',"modificacion")
	     	    	pedido1.procesar([jorge], 'gris',"modificacion")
		assert.equals(true, pedido1.estaListo())
	}
	
	test "si el cetro cheto cobra un 30 porciento mas"{
		debian.recibirPedido(pedido1)
		debian.pasarPedido(pedido1)
		debian.pasarPedido(pedido1)
		debian.pasarPedido(pedido1)
		assert.equals(debian.costoParcial(pedido1)*1.3, debian.costoTotal(pedido1))
	}
		
	test "si el cetro area cobra 200 menos de  4 empleados"{
		assert.equals(200, areaa2.costoAdicional())
	}

	test "si el cetro area cobra 400 mas de 4 o 4 empleados"{
		assert.equals(400, areaa.costoAdicional())
	}
	
	test "saber si un pedido esta retrasado" {
		debian.recibirPedido(pedido2)
		debian.pasarPedido(pedido2)
		assert.equals(true, debian.saberSiEstaAtrasado(pedido2))
		//assert.that(debian.saberSiEstaAtrasado(pedido2))
	}
	
	test "saber cuanto va a cobrar el centro" {
		debian.recibirPedido(pedido2)
		debian.pasarPedido(pedido2)
		debian.pasarPedido(pedido2)
		assert.equals(34421.4, debian.ingresos())
	}
	
	test "si el centro cheto puede recibir una remera  roja" {
		debian.recibirPedido(pedido1)
		assert.equals(1,debian.retornoPedidos().size())
	}	

	test "si el centro cheto puede pedido con remera no es roja" {
		debian.recibirPedido(pedido3)
		assert.notEquals(1,debian.retornoPedidos().size())
	}

	test "si el centro bartaija  puede recibir un pedido con  que no ma de 10 remeras" {
		barato.recibirPedido(pedido3)
		assert.notEquals(1,barato.retornoPedidos())
	}

	test "si el centro bartaija  puede recibir un pedido  cona mas de 10 remeras" {
		barato.recibirPedido(pedido4)
		assert.equals(0,barato.retornoPedidos())
	}
	
	test "si el centro area resive cualquier pedido" {
		areaa.recibirPedido(pedido1)
		assert.equals(1,areaa.retornoPedidos())
	}
}