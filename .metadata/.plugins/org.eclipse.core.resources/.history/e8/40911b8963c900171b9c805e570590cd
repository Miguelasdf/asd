import materiales.*
import clientes.*
import proveedores.*
import centros.*
import camisetas.*

class Pedido {
	var fechaDeEntrega
	var camiseta= []
	var proveedores = []
	var cantidad
	var movimientos = []
    var l=[]
	constructor(_camiseta, _proveedor,  _fechaDeEntrega) {
		camiseta = _camiseta  proveedores.addAll(_proveedor)
		fechaDeEntrega = _fechaDeEntrega
	}

	method fechaDeEntrega() {
		return fechaDeEntrega
	}

	method costoCamiseta() {
		return camiseta.calcularCosto()
	}

	method costoInicial(){
		return camiseta.sum({camisetaa=>camisetaa.costoInicial()})
	}	
	
	method esRoja(){
		return camiseta.esRoja()
	}
				
	method cantidad() {
		return camiseta.sum({camise=>camise.cantidadCamisetas() }) 
	}

	method camiseta() {
		return camiseta
	}
	
   method cantidadCamisetas() {
		return camiseta.size()
	}
	
	method procesar(_proveedor, _trabajo,modificacion) {		
//		movimientos.add(new Movimiento(_proveedor,cantidad,new Date(), self))
     	movimientos.add(new Movimiento(_proveedor,cantidad,new Date(), self))
     	l.add(_trabajo)
     	
	///	_proveedor.trabajarCamiseta(camiseta, _trabajo)
	}
	method tamanol(){
		return l.size()
	}
   method pedidoCosto(){
   	return camiseta 
   	
   }
   method fd(){
   	return l.size()==  proveedores.sum({provedor=>provedor.cantidadDetrabajos()})
   	
   }
 
 
	method estaListo() {
		//return proveedores.all {proveedor => movimientos.any{movimiento => movimiento.getProveedor() == proveedor}}
			return proveedores.all ({proveedor => movimientos.contains(proveedor)}) and l.size()==  proveedores.sum({provedor=>provedor.cantidadDetrabajos()})

	}
	
	method estaAtrasado() {
		return movimientos.any({movimiento => movimiento.atraso()})
	}
	method verificacionDePedidos(){
		return movimientos.all({ movi => proveedores.contains(movi.getProveedor() )})
	}
}

class Movimiento {
	var proveedor
	var cantidad
	var	date 
	var fechaself

	constructor (_proveedor, _cantidad, _date, _fechaself){	
		proveedor = _proveedor
		cantidad = _cantidad
		date = new Date()
		fechaself = _fechaself
		
	}

	method mostrarFecha(){
		return date	
	}	
	method getProveedor(){
		return proveedor
	}
	method atraso(){
		return self.mostrarFecha() > fechaself.fechaDeEntrega()
	}
}