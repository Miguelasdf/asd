import materiales.*
import camisetas.*
import proveedores.*
import clientes.*
import pedidos.*

class Centro {
	var pedidos = []
	var pedidosListos = []			
	 	
	method retornoPedidos() {
		return pedidos
	} 	
	 	
	method pasarPedido(_pedido, _proveedor, _trabajo){
		_pedido.procesar(_proveedor, _trabajo)			
	} 	
	 	
	method recibirPedido(_pedido){
		pedidos.add(_pedido)
	}
					
	method costoCamisetas(_pedido){
		return _pedido.costoCamiseta() * _pedido.cantidad()
	}	
		
	method saberCualesPedidosEstanListos(){
		return pedidos.filter({pedido => pedido.estaListo() })
	}
	
	method costoTotal(_pedido){
		return self.costoCamisetas(_pedido)
	}	
	
	method ingresos(){
		pedidosListos = self.saberCualesPedidosEstanListos()	
		return pedidosListos.sum({pedido => self.costoTotal(pedido)})
	}
}

class  CentroCheto inherits Centro {
	const porcentajeParaMultiplicar = 0.3
	const precioAceptadoPorCentroCheto = 650
	const cantidadAceptadaPorCentroCheto = 21	
	
	method aceptablePorCentroCheto(_pedido) {
		return _pedido.costoCamiseta() > precioAceptadoPorCentroCheto and _pedido.esRoja() 
		and _pedido.cantidad() < cantidadAceptadaPorCentroCheto	
	}	
	
	override method recibirPedido(_pedido){
		if (self.aceptablePorCentroCheto(_pedido))
			pedidos.add(_pedido)
	}

	override method costoTotal(_pedido){
		return super(_pedido) + (porcentajeParaMultiplicar * self.costoTotal(_pedido)) 
	}
}

class  CentroArea inherits Centro {
	var cantidadEmpleados
	var costoAdicional = 400
	var costoNormal = 200
	const descuentoTardio = 0.2
	const brechaEmpleados = 3
	
	constructor(_cantidadEmpleados){
		cantidadEmpleados = _cantidadEmpleados
	}

	method costoAdicional(){
		return if (cantidadEmpleados > brechaEmpleados) costoAdicional else costoNormal 
	}
	
	method costoParcial(_pedido){
		return self.costoCamisetas(_pedido)
	}
	
	method calculoDescuento(_pedido){
		return self.costoParcial(_pedido) * descuentoTardio
	}

	method descuento(_pedido){
		return if (_pedido.estaAtrasado()) self.calculoDescuento(_pedido) else 0
	}

	override method costoTotal(_pedido){
		 return super(_pedido) + self.costoAdicional() - self.descuento(_pedido)
	}	
}

class  CentroBaratija inherits Centro {
	const descuentoDiario = 10
	const precioAceptadoPorCentroBaratija = 120
	const cantidadAceptadaPorCentrobaratija = 20	
	
	method aceptablePorCentroBaratija(_pedido) {
		return _pedido.cantidad() > cantidadAceptadaPorCentrobaratija and 
		_pedido.costoInicial() < precioAceptadoPorCentroBaratija
	}

	override method recibirPedido(_pedido){
		if (self.aceptablePorCentroBaratija(_pedido))
			pedidos.add(_pedido)
	}
	
	method porcentajeDeDescuento(_pedido){
		return _pedido.cantidad() + descuentoDiario
	}		
	
	override method costoTotal(_pedido){
		return super(_pedido) - self.porcentajeDeDescuento(_pedido)
	}
}